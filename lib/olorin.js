"use strict";
var Hub, Myo, connection, events, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

_ = require('underscore');

events = require('./events');

connection = require('./connection');

Myo = (function(_super) {
  __extends(Myo, _super);

  Myo.defaultConfiguration = {};

  Myo.id = 0;

  function Myo(hub, configuration) {
    this.hub = hub;
    Myo.__super__.constructor.apply(this, arguments);
    this.configuration = _.extend({}, Myo.defaultConfiguration, configuration);
    this.id = Myo.id++;
    this.session = null;
  }

  Myo.prototype.vibrate = function(intensity) {
    if (intensity == null) {
      intensity = 'medium';
    }
    return this.trigger('command', 'vibrate', {
      type: intensity
    });
  };

  Myo.prototype.requestBluetoothStrength = function() {
    return this.trigger('command', 'request_rssi');
  };

  Myo.prototype.destroy = function() {
    return this.trigger('destroy');
  };

  return Myo;

})(events.Events);

Hub = (function() {
  function Hub(connection, proxyEventManager) {
    this.connection = connection;
    this.proxyEventManager = proxyEventManager;
    this.onMessage = __bind(this.onMessage, this);
    this.myos = {};
    this.subscriptions = [];
    this.subscriptions.push(this.connection.on('message', this.onMessage));
  }

  Hub.prototype.onMessage = function(eventData) {
    var myo;
    myo = this.myos[eventData.myo];
    if (!myo) {
      throw new Error('Specified Myo not found');
    }
    return this.proxyEventManager.handle(myo, eventData);
  };

  Hub.prototype.create = function(configuration) {
    var newMyo;
    newMyo = new Myo(this, configuration);
    this.myos[newMyo.id] = newMyo;
    this.subscriptions.push(newMyo.on('command', (function(_this) {
      return function(command, kwargs) {
        var data;
        data = {
          command: command,
          myo: newMyo.id
        };
        _.extend(data, kwargs);
        return _this.connection.send(JSON.stringify(['command', data]));
      };
    })(this)));
    this.subscriptions.push(newMyo.on('destroy', (function(_this) {
      return function() {
        return _this.myos[newMyo.id] = null;
      };
    })(this)));
    return newMyo;
  };

  Hub.prototype.destroy = function() {
    this.subscriptions.forEach(function(subscription) {
      return subscription.dispose();
    });
    return this.connection.close();
  };

  return Hub;

})();

_.extend(exports, {
  Hub: Hub,
  Myo: Myo
});

//# sourceMappingURL=data:application/json;base64,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ckNGLENBQUE7O0FBQUEsQ0EyRUMsQ0FBQyxNQUFGLENBQVMsT0FBVCxFQUFrQjtBQUFBLEVBQ2hCLEdBQUEsRUFBSyxHQURXO0FBQUEsRUFFaEIsR0FBQSxFQUFLLEdBRlc7Q0FBbEIsQ0EzRUEsQ0FBQSIsImZpbGUiOiJvbG9yaW4uanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIlxuXG5fID0gcmVxdWlyZSgndW5kZXJzY29yZScpXG5ldmVudHMgPSByZXF1aXJlKCcuL2V2ZW50cycpXG5jb25uZWN0aW9uID0gcmVxdWlyZSgnLi9jb25uZWN0aW9uJylcblxuXG5jbGFzcyBNeW8gZXh0ZW5kcyBldmVudHMuRXZlbnRzXG4gIEBkZWZhdWx0Q29uZmlndXJhdGlvbiA9IHt9XG4gIEBpZCA9IDBcblxuICAjIE15byBjb25zdHJ1Y3RvclxuICAjIEBwYXJhbSB7SHVifSBodWJcbiAgIyBAcGFyYW0ge29iamVjdH0gY29uZmlndXJhdGlvblxuICBjb25zdHJ1Y3RvcjogKEBodWIsIGNvbmZpZ3VyYXRpb24pIC0+XG4gICAgc3VwZXJcbiAgICBAY29uZmlndXJhdGlvbiA9IF8uZXh0ZW5kKHt9LCBNeW8uZGVmYXVsdENvbmZpZ3VyYXRpb24sIGNvbmZpZ3VyYXRpb24pXG4gICAgQGlkID0gTXlvLmlkKysgICMgbm90IHN1cmUgYWJvdXQgdGhpcyBvbmVcbiAgICBAc2Vzc2lvbiA9IG51bGxcblxuICB2aWJyYXRlOiAoaW50ZW5zaXR5PSdtZWRpdW0nKSAtPlxuICAgIEB0cmlnZ2VyKCdjb21tYW5kJywgJ3ZpYnJhdGUnLCB7XG4gICAgICB0eXBlOiBpbnRlbnNpdHlcbiAgICB9KVxuXG4gIHJlcXVlc3RCbHVldG9vdGhTdHJlbmd0aDogLT5cbiAgICBAdHJpZ2dlcignY29tbWFuZCcsICdyZXF1ZXN0X3Jzc2knKVxuXG4gIGRlc3Ryb3k6IC0+XG4gICAgQHRyaWdnZXIoJ2Rlc3Ryb3knKVxuXG5cbmNsYXNzIEh1YlxuICAjIEh1YiBjb25zdHJ1Y3RvclxuICAjIEFuIGh1YiBpcyByZXNwb25zaWJsZSB0byBrZWVwIHRyYWNrIG9mIGFsbCB0aGUgbXlvcyBjcmVhdGVkIGFuZCB0byBkZWxpdmVyXG4gICMgbWVzc2FnZXMgdG8gdGhlIGNvcnJlY3QgbXlvXG4gICMgQHBhcmFtIHtDb25uZWN0aW9ufSBjb25uZWN0aW9uXG4gIGNvbnN0cnVjdG9yOiAoQGNvbm5lY3Rpb24sIEBwcm94eUV2ZW50TWFuYWdlcikgLT5cbiAgICBAbXlvcyA9IHt9XG4gICAgQHN1YnNjcmlwdGlvbnMgPSBbXVxuICAgIEBzdWJzY3JpcHRpb25zLnB1c2goQGNvbm5lY3Rpb24ub24oJ21lc3NhZ2UnLCBAb25NZXNzYWdlKSlcblxuICBvbk1lc3NhZ2U6IChldmVudERhdGEpID0+XG4gICAgbXlvID0gQG15b3NbZXZlbnREYXRhLm15b11cblxuICAgIGlmIG5vdCBteW9cbiAgICAgIHRocm93IG5ldyBFcnJvcignU3BlY2lmaWVkIE15byBub3QgZm91bmQnKVxuXG4gICAgQHByb3h5RXZlbnRNYW5hZ2VyLmhhbmRsZShteW8sIGV2ZW50RGF0YSlcblxuICBjcmVhdGU6IChjb25maWd1cmF0aW9uKSAtPlxuICAgIG5ld015byA9IG5ldyBNeW8oQCwgY29uZmlndXJhdGlvbilcbiAgICBAbXlvc1tuZXdNeW8uaWRdID0gbmV3TXlvXG5cbiAgICBAc3Vic2NyaXB0aW9ucy5wdXNoKG5ld015by5vbignY29tbWFuZCcsIChjb21tYW5kLCBrd2FyZ3MpID0+XG4gICAgICBkYXRhID0ge1xuICAgICAgICBjb21tYW5kOiBjb21tYW5kLFxuICAgICAgICBteW86IG5ld015by5pZFxuICAgICAgfVxuICAgICAgXy5leHRlbmQoZGF0YSwga3dhcmdzKVxuICAgICAgQGNvbm5lY3Rpb24uc2VuZChKU09OLnN0cmluZ2lmeShbJ2NvbW1hbmQnLCBkYXRhXSkpXG4gICAgKSlcblxuICAgIEBzdWJzY3JpcHRpb25zLnB1c2gobmV3TXlvLm9uKCdkZXN0cm95JywgPT5cbiAgICAgIEBteW9zW25ld015by5pZF0gPSBudWxsXG4gICAgKSlcbiAgICByZXR1cm4gbmV3TXlvXG5cbiAgZGVzdHJveTogLT5cbiAgICBAc3Vic2NyaXB0aW9ucy5mb3JFYWNoKChzdWJzY3JpcHRpb24pLT5cbiAgICAgIHN1YnNjcmlwdGlvbi5kaXNwb3NlKClcbiAgICApXG4gICAgQGNvbm5lY3Rpb24uY2xvc2UoKSAjIG5vdCBzdXJlIGFib3V0IHRoYXRcblxuXG5fLmV4dGVuZChleHBvcnRzLCB7XG4gIEh1YjogSHViXG4gIE15bzogTXlvXG59KVxuIl19