"use strict";
var Hub, Myo, connection, events, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

_ = require('underscore');

events = require('./events');

connection = require('./connection');

Myo = (function(_super) {
  __extends(Myo, _super);

  Myo.defaultConfiguration = {};

  Myo.id = 0;

  function Myo(hub, configuration) {
    this.hub = hub;
    Myo.__super__.constructor.apply(this, arguments);
    this.configuration = _.extend({}, Myo.defaultConfiguration, configuration);
    this.id = Myo.id++;
    this.session = null;
  }

  Myo.prototype.vibrate = function(intensity) {
    if (intensity == null) {
      intensity = 'medium';
    }
    return this.trigger('command', 'vibrate', {
      type: intensity
    });
  };

  Myo.prototype.requestBluetoothStrength = function() {
    return this.trigger('command', 'request_rssi');
  };

  Myo.prototype.zeroOrientation = function() {
    var _ref;
    if ((_ref = this.session) != null ? _ref.extra.lastOrientationData : void 0) {
      this.session.extra.zeroOrientationOffset = this.session.extra.lastOrientationData;
    }
    return this.trigger('zero_orientation');
  };

  Myo.prototype.destroy = function() {
    return this.trigger('destroy');
  };

  return Myo;

})(events.Events);

Hub = (function() {
  function Hub(_arg) {
    this.connection = _arg.connection, this.proxyEventManager = _arg.proxyEventManager;
    this.onMessage = __bind(this.onMessage, this);
    this.myos = {};
    this.subscriptions = [];
    if (!this.connection) {
      this.connection = new connection.Connection();
    }
    if (!this.proxyEventManager) {
      this.proxyEventManager = new events.ProxyEventManager();
    }
    this.subscriptions.push(this.connection.on('message', this.onMessage));
  }

  Hub.prototype.onMessage = function(eventData) {
    var myo;
    myo = this.myos[eventData.myo];
    if (!myo) {
      throw new Error('Specified Myo not found');
    }
    return this.proxyEventManager.handle(myo, eventData);
  };

  Hub.prototype.create = function(configuration) {
    var newMyo;
    newMyo = new Myo(this, configuration);
    this.myos[newMyo.id] = newMyo;
    this.subscriptions.push(newMyo.on('command', (function(_this) {
      return function(command, kwargs) {
        var data;
        data = {
          command: command,
          myo: newMyo.id
        };
        _.extend(data, kwargs);
        return _this.connection.send(JSON.stringify(['command', data]));
      };
    })(this)));
    this.subscriptions.push(newMyo.on('destroy', (function(_this) {
      return function() {
        return _this.myos[newMyo.id] = null;
      };
    })(this)));
    return newMyo;
  };

  Hub.prototype.destroy = function() {
    this.subscriptions.forEach(function(subscription) {
      return subscription.dispose();
    });
    return this.connection.close();
  };

  return Hub;

})();

_.extend(exports, {
  Hub: Hub,
  Myo: Myo
});

//# sourceMappingURL=data:application/json;base64,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LENBQW9CLE1BQU0sQ0FBQyxFQUFQLENBQVUsU0FBVixFQUFxQixDQUFBLFNBQUEsS0FBQSxHQUFBO2FBQUEsU0FBQSxHQUFBO2VBQ3ZDLEtBQUMsQ0FBQSxJQUFLLENBQUEsTUFBTSxDQUFDLEVBQVAsQ0FBTixHQUFtQixLQURvQjtNQUFBLEVBQUE7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXJCLENBQXBCLENBWkEsQ0FBQTtBQWVBLFdBQU8sTUFBUCxDQWhCTTtFQUFBLENBdEJSLENBQUE7O0FBQUEsZ0JBd0NBLE9BQUEsR0FBUyxTQUFBLEdBQUE7QUFDUCxJQUFBLElBQUMsQ0FBQSxhQUFhLENBQUMsT0FBZixDQUF1QixTQUFDLFlBQUQsR0FBQTthQUNyQixZQUFZLENBQUMsT0FBYixDQUFBLEVBRHFCO0lBQUEsQ0FBdkIsQ0FBQSxDQUFBO1dBR0EsSUFBQyxDQUFBLFVBQVUsQ0FBQyxLQUFaLENBQUEsRUFKTztFQUFBLENBeENULENBQUE7O2FBQUE7O0lBM0NGLENBQUE7O0FBQUEsQ0EwRkMsQ0FBQyxNQUFGLENBQVMsT0FBVCxFQUFrQjtBQUFBLEVBQ2hCLEdBQUEsRUFBSyxHQURXO0FBQUEsRUFFaEIsR0FBQSxFQUFLLEdBRlc7Q0FBbEIsQ0ExRkEsQ0FBQSIsImZpbGUiOiJvbG9yaW4uanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIlxuXG5fID0gcmVxdWlyZSgndW5kZXJzY29yZScpXG5ldmVudHMgPSByZXF1aXJlKCcuL2V2ZW50cycpXG5jb25uZWN0aW9uID0gcmVxdWlyZSgnLi9jb25uZWN0aW9uJylcblxuXG5jbGFzcyBNeW8gZXh0ZW5kcyBldmVudHMuRXZlbnRzXG4gIEBkZWZhdWx0Q29uZmlndXJhdGlvbiA9IHt9XG4gIEBpZCA9IDBcblxuICAjIE15byBjb25zdHJ1Y3RvclxuICAjIEBwYXJhbSB7SHVifSBodWJcbiAgIyBAcGFyYW0ge29iamVjdH0gY29uZmlndXJhdGlvblxuICBjb25zdHJ1Y3RvcjogKEBodWIsIGNvbmZpZ3VyYXRpb24pIC0+XG4gICAgc3VwZXJcbiAgICBAY29uZmlndXJhdGlvbiA9IF8uZXh0ZW5kKHt9LCBNeW8uZGVmYXVsdENvbmZpZ3VyYXRpb24sIGNvbmZpZ3VyYXRpb24pXG4gICAgQGlkID0gTXlvLmlkKysgICMgbm90IHN1cmUgYWJvdXQgdGhpcyBvbmVcbiAgICBAc2Vzc2lvbiA9IG51bGxcblxuICB2aWJyYXRlOiAoaW50ZW5zaXR5PSdtZWRpdW0nKSAtPlxuICAgIEB0cmlnZ2VyKCdjb21tYW5kJywgJ3ZpYnJhdGUnLCB7XG4gICAgICB0eXBlOiBpbnRlbnNpdHlcbiAgICB9KVxuXG4gIHJlcXVlc3RCbHVldG9vdGhTdHJlbmd0aDogLT5cbiAgICBAdHJpZ2dlcignY29tbWFuZCcsICdyZXF1ZXN0X3Jzc2knKVxuXG4gIHplcm9PcmllbnRhdGlvbjogLT5cbiAgICAjIHNldCBjdXJyZW50IG9yaWVudGF0aW9uIGFzIHRoZSBzdGFydGluZyBwb2ludCBmb3IgYWxsIGZ1dHVyZSBvcmllbnRhdGlvbiBjYWxjdWxhdGlvbnNcbiAgICBpZiBAc2Vzc2lvbj8uZXh0cmEubGFzdE9yaWVudGF0aW9uRGF0YVxuICAgICAgQHNlc3Npb24uZXh0cmEuemVyb09yaWVudGF0aW9uT2Zmc2V0ID0gQHNlc3Npb24uZXh0cmEubGFzdE9yaWVudGF0aW9uRGF0YVxuICAgIEB0cmlnZ2VyKCd6ZXJvX29yaWVudGF0aW9uJylcblxuICBkZXN0cm95OiAtPlxuICAgIEB0cmlnZ2VyKCdkZXN0cm95JylcblxuXG5jbGFzcyBIdWJcbiAgIyBIdWIgY29uc3RydWN0b3JcbiAgIyBBbiBodWIgaXMgcmVzcG9uc2libGUgdG8ga2VlcCB0cmFjayBvZiBhbGwgdGhlIG15b3MgY3JlYXRlZCBhbmQgdG8gZGVsaXZlclxuICAjIG1lc3NhZ2VzIHRvIHRoZSBjb3JyZWN0IG15b1xuICAjIEBwYXJhbSB7Q29ubmVjdGlvbn0gY29ubmVjdGlvblxuICBjb25zdHJ1Y3RvcjogKHtAY29ubmVjdGlvbiwgQHByb3h5RXZlbnRNYW5hZ2VyfSkgLT5cbiAgICBAbXlvcyA9IHt9XG4gICAgQHN1YnNjcmlwdGlvbnMgPSBbXVxuXG4gICAgaWYgbm90IEBjb25uZWN0aW9uXG4gICAgICAjIGFkZCBhIGRlZmF1bHQgY29ubmVjdGlvbiB0byB0aGlzIGh1YlxuICAgICAgQGNvbm5lY3Rpb24gPSBuZXcgY29ubmVjdGlvbi5Db25uZWN0aW9uKClcblxuICAgIGlmIG5vdCBAcHJveHlFdmVudE1hbmFnZXJcbiAgICAgICMgYWRkIGEgZGVmYXVsdCBwcnh5IGV2ZW50IG1hbmFnZSB0byB0aGlzIGh1YlxuICAgICAgQHByb3h5RXZlbnRNYW5hZ2VyID0gbmV3IGV2ZW50cy5Qcm94eUV2ZW50TWFuYWdlcigpXG5cbiAgICBAc3Vic2NyaXB0aW9ucy5wdXNoKEBjb25uZWN0aW9uLm9uKCdtZXNzYWdlJywgQG9uTWVzc2FnZSkpXG5cbiAgb25NZXNzYWdlOiAoZXZlbnREYXRhKSA9PlxuICAgIG15byA9IEBteW9zW2V2ZW50RGF0YS5teW9dXG5cbiAgICBpZiBub3QgbXlvXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NwZWNpZmllZCBNeW8gbm90IGZvdW5kJylcblxuICAgIEBwcm94eUV2ZW50TWFuYWdlci5oYW5kbGUobXlvLCBldmVudERhdGEpXG5cbiAgY3JlYXRlOiAoY29uZmlndXJhdGlvbikgLT5cbiAgICBuZXdNeW8gPSBuZXcgTXlvKEAsIGNvbmZpZ3VyYXRpb24pXG4gICAgQG15b3NbbmV3TXlvLmlkXSA9IG5ld015b1xuXG4gICAgQHN1YnNjcmlwdGlvbnMucHVzaChuZXdNeW8ub24oJ2NvbW1hbmQnLCAoY29tbWFuZCwga3dhcmdzKSA9PlxuICAgICAgZGF0YSA9IHtcbiAgICAgICAgY29tbWFuZDogY29tbWFuZCxcbiAgICAgICAgbXlvOiBuZXdNeW8uaWRcbiAgICAgIH1cbiAgICAgIF8uZXh0ZW5kKGRhdGEsIGt3YXJncylcbiAgICAgIEBjb25uZWN0aW9uLnNlbmQoSlNPTi5zdHJpbmdpZnkoWydjb21tYW5kJywgZGF0YV0pKVxuICAgICkpXG5cbiAgICBAc3Vic2NyaXB0aW9ucy5wdXNoKG5ld015by5vbignZGVzdHJveScsID0+XG4gICAgICBAbXlvc1tuZXdNeW8uaWRdID0gbnVsbFxuICAgICkpXG4gICAgcmV0dXJuIG5ld015b1xuXG4gIGRlc3Ryb3k6IC0+XG4gICAgQHN1YnNjcmlwdGlvbnMuZm9yRWFjaCgoc3Vic2NyaXB0aW9uKS0+XG4gICAgICBzdWJzY3JpcHRpb24uZGlzcG9zZSgpXG4gICAgKVxuICAgIEBjb25uZWN0aW9uLmNsb3NlKCkgIyBub3Qgc3VyZSBhYm91dCB0aGF0XG5cblxuXy5leHRlbmQoZXhwb3J0cywge1xuICBIdWI6IEh1YlxuICBNeW86IE15b1xufSlcbiJdfQ==