"use strict";
var Hub, Myo, Session, connection, events, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

_ = require('underscore');

events = require('./events');

connection = require('./connection');

Myo = (function(_super) {
  var defaultConfiguration, _id;

  __extends(Myo, _super);

  defaultConfiguration = {};

  _id = 0;

  function Myo(configuration) {
    Myo.__super__.constructor.apply(this, arguments);
    this.configuration = _.extend({}, Myo.defaultConfiguration, configuration);
    this.id = _id++;
    this.session = null;
  }

  Myo.prototype.destroy = function() {
    return this.trigger('destroy');
  };

  return Myo;

})(events.Events);

Session = (function() {
  function Session(myo, arm, direction) {
    this.myo = myo;
    this.arm = arm;
    this.direction = direction;
    this.pose = null;
    this.eventsQueue = [];
  }

  Session.prototype.initialize = function() {};

  return Session;

})();

Hub = (function() {
  function Hub(connection) {
    this.connection = connection;
    this.onMessage = __bind(this.onMessage, this);
    this.myos = {};
    this.onMessageSubscription = this.connection.on('message', this.onMessage);
  }

  Hub.prototype.onMessage = function(eventData) {
    var baseEventHandler, myo;
    myo = this.myos[eventData.myo];
    if (!myo) {
      throw new Error('Specified Myo not found');
    }
    baseEventHandler = this.baseEventHandlers[eventData.type];
    if (!baseEventHandler) {
      throw new Error('Event data type not recognized');
    }
    return baseEventHandler(myo, eventData);
  };

  Hub.prototype.create = function(configuration) {
    var newMyo;
    newMyo = new Myo(configuration);
    this.myos[newMyo.id] = newMyo;
    newMyo.on('destroy', (function(_this) {
      return function() {
        return _this.myos[newMyo.id] = null;
      };
    })(this));
    return newMyo;
  };

  Hub.prototype.destroy = function() {
    this.onMessageSubscription.dispose();
    return this.connection.close();
  };

  Hub.prototype.baseEventHandlers = {
    arm_recognized: function(myo, eventData) {
      if (myo.session) {
        myo.session.close();
      }
      myo.session = new Session(this, eventData.arm, eventData.x_direction);
      return myo.trigger(new events.Event('arm_recognized'));
    },
    arm_lost: function(myo, eventData) {
      if (myo.session) {
        myo.session.close();
      }
      myo.session = null;
      return myo.trigger(new events.Event('arm_lost'));
    },
    pose: function(myo, eventData) {
      if (!myo.session) {
        throw new Error('No session found');
      }
      myo.session.pose = eventData.pose;
      return myo.trigger(new events.Event('pose', eventData.pose));
    },
    orientation: function(myo, eventData) {
      var accelerometerData, gyroscopeData, imuData, orientationData;
      orientationData = {
        x: eventData.orientation.x,
        y: eventData.orientation.y,
        z: eventData.orientation.z,
        w: eventData.orientation.w
      };
      gyroscopeData = {
        x: eventData.gyroscope[0],
        y: eventData.gyroscope[1],
        z: eventData.gyroscope[2]
      };
      accelerometerData = {
        x: eventData.accelerometer[0],
        y: eventData.accelerometer[1],
        z: eventData.accelerometer[2]
      };
      imuData = {
        gyroscope: gyroscopeData,
        accelerometer: accelerometerData,
        orientation: orientationData
      };
      myo.trigger(new events.Event('orientation', orientationData));
      myo.trigger(new events.Event('gyroscope', gyroscopeData));
      myo.trigger(new events.Event('accelerometer', accelerometerData));
      return myo.trigger(new events.Event('imu', imuData));
    },
    rssi: function(myo, eventData) {
      return myo.trigger(new events.Event('bluetooth_strength', eventData.rssi));
    },
    connected: function(myo, eventData) {
      return myo.trigger(new events.Event('connected'));
    },
    disconnected: function(myo, eventData) {
      return myo.trigger(new events.Event('disconnected'));
    }
  };

  return Hub;

})();

_.extend(exports, {
  Hub: Hub,
  Myo: Myo
});

//# sourceMappingURL=data:application/json;base64,