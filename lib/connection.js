"use strict";
var Connection, WebSocket, events, settings, _,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore');

settings = require('./settings');

events = require('./events');

WebSocket = require('ws');

Connection = (function(_super) {
  __extends(Connection, _super);

  function Connection(configuration) {
    this.onMessage = __bind(this.onMessage, this);
    Connection.__super__.constructor.apply(this, arguments);
    this.configuration = _.extend({}, this.defaultConfiguration, configuration);
    this.url = this.configuration.socketUrl + this.configuration.apiVersion;
    console.log('connecting to:', this.url);
    this.socket = new this.SocketClass(this.url);
    this.socket.onmessage = this.onMessage;
  }

  Connection.prototype.SocketClass = WebSocket;

  Connection.prototype.defaultConfiguration = {
    socketUrl: settings.conf.socketUrl,
    apiVersion: settings.conf.apiVersion
  };

  Connection.prototype.messageTypes = {
    event: 'event'
  };

  Connection.prototype.onMessage = function(message) {
    var data, eventData, messageType;
    data = JSON.parse(message.data);
    messageType = data[0];
    eventData = data[1];
    if (messageType !== this.messageTypes.event) {
      throw new Error('Unknown message received: ' + message.toString());
    }
    return this.trigger('message', eventData);
  };

  Connection.prototype.send = function(message) {
    console.log(message);
    return this.socket.send(message);
  };

  Connection.prototype.close = function() {
    return this.socket.close();
  };

  return Connection;

})(events.Events);

_.extend(exports, {
  Connection: Connection
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbm5lY3Rpb24uY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQUEsQ0FBQTtBQUFBLElBQUEsMENBQUE7RUFBQTs7aVNBQUE7O0FBQUEsQ0FFQSxHQUFJLE9BQUEsQ0FBUSxZQUFSLENBRkosQ0FBQTs7QUFBQSxRQUdBLEdBQVcsT0FBQSxDQUFRLFlBQVIsQ0FIWCxDQUFBOztBQUFBLE1BSUEsR0FBUyxPQUFBLENBQVEsVUFBUixDQUpULENBQUE7O0FBQUEsU0FLQSxHQUFZLE9BQUEsQ0FBUSxJQUFSLENBTFosQ0FBQTs7QUFBQTtBQWFFLCtCQUFBLENBQUE7O0FBQWEsRUFBQSxvQkFBQyxhQUFELEdBQUE7QUFDWCxpREFBQSxDQUFBO0FBQUEsSUFBQSw2Q0FBQSxTQUFBLENBQUEsQ0FBQTtBQUFBLElBQ0EsSUFBQyxDQUFBLGFBQUQsR0FBaUIsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxFQUFULEVBQWEsSUFBQyxDQUFBLG9CQUFkLEVBQW9DLGFBQXBDLENBRGpCLENBQUE7QUFBQSxJQUVBLElBQUMsQ0FBQSxHQUFELEdBQU8sSUFBQyxDQUFBLGFBQWEsQ0FBQyxTQUFmLEdBQTJCLElBQUMsQ0FBQSxhQUFhLENBQUMsVUFGakQsQ0FBQTtBQUFBLElBR0EsT0FBTyxDQUFDLEdBQVIsQ0FBWSxnQkFBWixFQUE4QixJQUFDLENBQUEsR0FBL0IsQ0FIQSxDQUFBO0FBQUEsSUFJQSxJQUFDLENBQUEsTUFBRCxHQUFjLElBQUEsSUFBQyxDQUFBLFdBQUQsQ0FBYSxJQUFDLENBQUEsR0FBZCxDQUpkLENBQUE7QUFBQSxJQUtBLElBQUMsQ0FBQSxNQUFNLENBQUMsU0FBUixHQUFvQixJQUFDLENBQUEsU0FMckIsQ0FEVztFQUFBLENBQWI7O0FBQUEsdUJBUUEsV0FBQSxHQUFhLFNBUmIsQ0FBQTs7QUFBQSx1QkFTQSxvQkFBQSxHQUFzQjtBQUFBLElBQ3BCLFNBQUEsRUFBVyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBREw7QUFBQSxJQUVwQixVQUFBLEVBQVksUUFBUSxDQUFDLElBQUksQ0FBQyxVQUZOO0dBVHRCLENBQUE7O0FBQUEsdUJBYUEsWUFBQSxHQUFjO0FBQUEsSUFDWixLQUFBLEVBQU8sT0FESztHQWJkLENBQUE7O0FBQUEsdUJBaUJBLFNBQUEsR0FBVyxTQUFDLE9BQUQsR0FBQTtBQUNULFFBQUEsNEJBQUE7QUFBQSxJQUFBLElBQUEsR0FBTyxJQUFJLENBQUMsS0FBTCxDQUFXLE9BQU8sQ0FBQyxJQUFuQixDQUFQLENBQUE7QUFBQSxJQUNBLFdBQUEsR0FBYyxJQUFLLENBQUEsQ0FBQSxDQURuQixDQUFBO0FBQUEsSUFFQSxTQUFBLEdBQVksSUFBSyxDQUFBLENBQUEsQ0FGakIsQ0FBQTtBQUlBLElBQUEsSUFBRyxXQUFBLEtBQWlCLElBQUMsQ0FBQSxZQUFZLENBQUMsS0FBbEM7QUFDRSxZQUFVLElBQUEsS0FBQSxDQUFNLDRCQUFBLEdBQStCLE9BQU8sQ0FBQyxRQUFSLENBQUEsQ0FBckMsQ0FBVixDQURGO0tBSkE7V0FPQSxJQUFDLENBQUEsT0FBRCxDQUFTLFNBQVQsRUFBb0IsU0FBcEIsRUFSUztFQUFBLENBakJYLENBQUE7O0FBQUEsdUJBMkJBLElBQUEsR0FBTSxTQUFDLE9BQUQsR0FBQTtBQUNKLElBQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxPQUFaLENBQUEsQ0FBQTtXQUNBLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBUixDQUFhLE9BQWIsRUFGSTtFQUFBLENBM0JOLENBQUE7O0FBQUEsdUJBK0JBLEtBQUEsR0FBTyxTQUFBLEdBQUE7V0FDTCxJQUFDLENBQUEsTUFBTSxDQUFDLEtBQVIsQ0FBQSxFQURLO0VBQUEsQ0EvQlAsQ0FBQTs7b0JBQUE7O0dBTHVCLE1BQU0sQ0FBQyxPQVJoQyxDQUFBOztBQUFBLENBK0NDLENBQUMsTUFBRixDQUFTLE9BQVQsRUFBa0I7QUFBQSxFQUNoQixVQUFBLEVBQVksVUFESTtDQUFsQixDQS9DQSxDQUFBIiwiZmlsZSI6ImNvbm5lY3Rpb24uanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIlxuXG5fID0gcmVxdWlyZSgndW5kZXJzY29yZScpXG5zZXR0aW5ncyA9IHJlcXVpcmUoJy4vc2V0dGluZ3MnKVxuZXZlbnRzID0gcmVxdWlyZSgnLi9ldmVudHMnKVxuV2ViU29ja2V0ID0gcmVxdWlyZSgnd3MnKVxuXG5cbmNsYXNzIENvbm5lY3Rpb24gZXh0ZW5kcyBldmVudHMuRXZlbnRzXG4gICMgQ29ubmVjdGlvbiBjb25zdHJ1Y3RvclxuICAjIEEgdmVyeSBzaW1wbGUgd3JhcHBlciBjbGFzcyBhcm91bmQgYSB3ZWIgc29ja2V0IGNvbm5lY3Rpb24gd2hpY2gga25vd3MgYWJvdXRcbiAgIyB0aGUga2luZCBvZiBtZXNzYWdlIGEgbXlvIGNhbiByZWNlaXZlXG4gICMgQHBhcmFtIHtvYmplY3R9IGNvbmZpZ3VyYXRpb25cbiAgY29uc3RydWN0b3I6IChjb25maWd1cmF0aW9uKSAtPlxuICAgIHN1cGVyXG4gICAgQGNvbmZpZ3VyYXRpb24gPSBfLmV4dGVuZCh7fSwgQGRlZmF1bHRDb25maWd1cmF0aW9uLCBjb25maWd1cmF0aW9uKVxuICAgIEB1cmwgPSBAY29uZmlndXJhdGlvbi5zb2NrZXRVcmwgKyBAY29uZmlndXJhdGlvbi5hcGlWZXJzaW9uXG4gICAgY29uc29sZS5sb2coJ2Nvbm5lY3RpbmcgdG86JywgQHVybClcbiAgICBAc29ja2V0ID0gbmV3IEBTb2NrZXRDbGFzcyhAdXJsKVxuICAgIEBzb2NrZXQub25tZXNzYWdlID0gQG9uTWVzc2FnZVxuXG4gIFNvY2tldENsYXNzOiBXZWJTb2NrZXRcbiAgZGVmYXVsdENvbmZpZ3VyYXRpb246IHtcbiAgICBzb2NrZXRVcmw6IHNldHRpbmdzLmNvbmYuc29ja2V0VXJsXG4gICAgYXBpVmVyc2lvbjogc2V0dGluZ3MuY29uZi5hcGlWZXJzaW9uXG4gIH1cbiAgbWVzc2FnZVR5cGVzOiB7XG4gICAgZXZlbnQ6ICdldmVudCdcbiAgfVxuXG4gIG9uTWVzc2FnZTogKG1lc3NhZ2UpID0+XG4gICAgZGF0YSA9IEpTT04ucGFyc2UobWVzc2FnZS5kYXRhKVxuICAgIG1lc3NhZ2VUeXBlID0gZGF0YVswXVxuICAgIGV2ZW50RGF0YSA9IGRhdGFbMV1cblxuICAgIGlmIG1lc3NhZ2VUeXBlIGlzbnQgQG1lc3NhZ2VUeXBlcy5ldmVudFxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIG1lc3NhZ2UgcmVjZWl2ZWQ6ICcgKyBtZXNzYWdlLnRvU3RyaW5nKCkpXG5cbiAgICBAdHJpZ2dlcignbWVzc2FnZScsIGV2ZW50RGF0YSlcblxuICBzZW5kOiAobWVzc2FnZSkgLT5cbiAgICBjb25zb2xlLmxvZyhtZXNzYWdlKVxuICAgIEBzb2NrZXQuc2VuZChtZXNzYWdlKVxuXG4gIGNsb3NlOiAtPlxuICAgIEBzb2NrZXQuY2xvc2UoKSAjIG5vdCBzdXJlIGFib3V0IHRoYXRcblxuXy5leHRlbmQoZXhwb3J0cywge1xuICBDb25uZWN0aW9uOiBDb25uZWN0aW9uXG59KVxuIl19