"use strict";
var Events, ExperimentalProxyEventManager, ExtendedProxyEventManager, MessageQueue, ProxyEventManager, Session, Subscription, _,
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore');

MessageQueue = (function() {
  function MessageQueue(limit) {
    this.limit = limit != null ? limit : 1000;
    this.queue = [];
  }

  MessageQueue.prototype.purge = function() {
    if (this.queue.length > this.limit) {
      return this.queue.splice(this.limit, this.queue.length - this.limit);
    }
  };

  MessageQueue.prototype.push = function(object) {
    this.purge();
    return this.queue.push(object);
  };

  MessageQueue.prototype.getLastItems = function(length) {
    if (length == null) {
      length = 100;
    }
    return this.queue.slice(0, length);
  };

  return MessageQueue;

})();

Session = (function() {
  function Session(messageQueueLimit) {
    this.messageQueueLimit = messageQueueLimit;
    this.pose = null;
    this.messagesQueue = new MessageQueue(this.messageQueueLimit);
    this.arm = this.direction = this.version = this.connectedTimestamp = this.armRecognizedTimestamp = null;
    this.extra = {};
  }

  Session.prototype.initialize = function() {};

  Session.prototype.onConnected = function(version, connectedTimestamp) {
    this.connectedTimestamp = connectedTimestamp;
    return this.version = version.join('.');
  };

  Session.prototype.onArmRecognized = function(arm, direction, armRecognizedTimestamp) {
    this.arm = arm;
    this.direction = direction;
    this.armRecognizedTimestamp = armRecognizedTimestamp;
  };

  Session.prototype.close = function() {};

  return Session;

})();

Subscription = (function() {
  function Subscription(callback, index, subscriptionList) {
    this.callback = callback;
    this.index = index;
    this.subscriptionList = subscriptionList;
  }

  Subscription.prototype.invoke = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.callback.apply(this, args);
  };

  Subscription.prototype.dispose = function() {
    return this.subscriptionList.splice(this.index, 0);
  };

  return Subscription;

})();

Events = (function() {
  function Events() {
    this.events = {};
  }

  Events.prototype.on = function(eventName, listener) {
    var subscription, subscriptionList;
    if (!this.events[eventName]) {
      this.events[eventName] = [];
    }
    subscriptionList = this.events[eventName];
    subscription = new Subscription(listener, subscriptionList.length, subscriptionList);
    subscriptionList.push(subscription);
    return subscription;
  };

  Events.prototype.trigger = function() {
    var args, eventName, len, subscription, subscriptionList, _results;
    eventName = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    subscriptionList = this.events[eventName] || [];
    len = subscriptionList.length;
    _results = [];
    while (len--) {
      subscription = subscriptionList[len];
      _results.push(subscription.invoke.apply(subscription, args));
    }
    return _results;
  };

  Events.prototype.off = function(eventName) {
    return this.events[eventName] = [];
  };

  return Events;

})();

ProxyEventManager = (function() {
  function ProxyEventManager() {}

  ProxyEventManager.prototype.handle = function(myo, eventData) {
    var handler;
    this.initSession(myo, eventData);
    myo.session.messagesQueue.push(eventData);
    handler = this.getHandler(eventData.type);
    return handler.call(this, myo, eventData);
  };

  ProxyEventManager.prototype.initSession = function(myo, eventData) {
    if (!myo.session) {
      myo.session = new Session();
      return false;
    }
    return true;
  };

  ProxyEventManager.prototype.removeSession = function(myo) {
    if (myo.session) {
      myo.session.close();
    }
    return myo.session = null;
  };

  ProxyEventManager.prototype.getHandler = function(eventType) {
    return this[eventType] || this["default"];
  };

  ProxyEventManager.prototype.arm_recognized = function(myo, eventData) {
    myo.session.onArmRecognized(eventData.arm, eventData.x_direction, eventData.timestamp);
    return myo.trigger('arm_recognized', eventData);
  };

  ProxyEventManager.prototype.arm_lost = function(myo, eventData) {
    this.removeSession(myo);
    return myo.trigger('arm_lost', eventData);
  };

  ProxyEventManager.prototype.paired = function(myo, eventData) {
    return myo.trigger('paired', eventData);
  };

  ProxyEventManager.prototype.pose = function(myo, eventData) {
    myo.session.pose = eventData.pose;
    return myo.trigger('pose', eventData.pose);
  };

  ProxyEventManager.prototype.orientation = function(myo, eventData) {
    return myo.trigger('orientation', eventData);
  };

  ProxyEventManager.prototype.rssi = function(myo, eventData) {
    return myo.trigger('bluetooth_strength', eventData.rssi);
  };

  ProxyEventManager.prototype.connected = function(myo, eventData) {
    myo.session.onConnected(eventData.version, eventData.timestamp);
    return myo.trigger('connected', eventData);
  };

  ProxyEventManager.prototype.disconnected = function(myo, eventData) {
    this.removeSession(myo);
    return myo.trigger('disconnected', eventData);
  };

  ProxyEventManager.prototype["default"] = function(myo, eventData) {
    return console.log('Unhandled event:', eventData);
  };

  return ProxyEventManager;

})();

ExtendedProxyEventManager = (function(_super) {
  __extends(ExtendedProxyEventManager, _super);

  function ExtendedProxyEventManager() {
    return ExtendedProxyEventManager.__super__.constructor.apply(this, arguments);
  }

  ExtendedProxyEventManager.prototype.orientation = function(myo, eventData) {
    var accelerometerData, gyroscopeData, imuData, orientationData, state;
    state = myo.session.extra;
    orientationData = {
      x: eventData.orientation.x - state.zeroOrientationOffset.x,
      y: eventData.orientation.y - state.zeroOrientationOffset.y,
      z: eventData.orientation.z - state.zeroOrientationOffset.z,
      w: eventData.orientation.w - state.zeroOrientationOffset.w
    };
    gyroscopeData = {
      x: eventData.gyroscope[0],
      y: eventData.gyroscope[1],
      z: eventData.gyroscope[2]
    };
    accelerometerData = {
      x: eventData.accelerometer[0],
      y: eventData.accelerometer[1],
      z: eventData.accelerometer[2]
    };
    imuData = {
      gyroscope: gyroscopeData,
      accelerometer: accelerometerData,
      orientation: orientationData
    };
    state.lastOrientationData = orientationData;
    ExtendedProxyEventManager.__super__.orientation.call(this, myo, orientationData);
    this.gyroscope(myo, gyroscopeData);
    this.accelerometer(myo, accelerometerData);
    return this.imu(myo, imuData);
  };

  ExtendedProxyEventManager.prototype.gyroscope = function(myo, eventData) {
    return myo.trigger('gyroscope', eventData);
  };

  ExtendedProxyEventManager.prototype.accelerometer = function(myo, eventData) {
    return myo.trigger('accelerometer', eventData);
  };

  ExtendedProxyEventManager.prototype.imu = function(myo, eventData) {
    return myo.trigger('imu', eventData);
  };

  return ExtendedProxyEventManager;

})(ProxyEventManager);

ExperimentalProxyEventManager = (function(_super) {
  __extends(ExperimentalProxyEventManager, _super);

  function ExperimentalProxyEventManager() {
    return ExperimentalProxyEventManager.__super__.constructor.apply(this, arguments);
  }

  ExperimentalProxyEventManager.prototype.initSession = function(myo) {
    var hadSession;
    hadSession = ExperimentalProxyEventManager.__super__.initSession.apply(this, arguments);
    if (!hadSession) {
      return _.extend(myo.session.extra, {
        wasRight: false,
        sensitivity: 20,
        lastIMU: null,
        doubleTap: {
          threshold: 0.9,
          time: [80, 300]
        },
        zeroOrientationOffset: {
          x: 0,
          y: 0,
          z: 0,
          w: 0
        }
      });
    }
  };

  ExperimentalProxyEventManager.prototype.accelerometer = function(myo, eventData) {
    var delta, diff, doubleTapOptions, last, state, y, z;
    ExperimentalProxyEventManager.__super__.accelerometer.apply(this, arguments);
    state = myo.session.extra;
    if (!state.lastIMU) {
      return;
    }
    doubleTapOptions = state.doubleTap;
    last = state.lastIMU.accelerometer;
    y = Math.abs(eventData.y);
    z = Math.abs(eventData.z);
    delta = Math.abs(Math.abs(last.y) - y) + Math.abs(Math.abs(last.z) - z);
    if (delta > doubleTapOptions.threshold) {
      if (state.last_tap) {
        diff = new Date().getTime() - state.last_tap;
        if (diff > doubleTapOptions.time[0] && diff < doubleTapOptions.time[1]) {
          this.double_tap(myo, eventData);
        }
      }
      return state.last_tap = new Date().getTime();
    }
  };

  ExperimentalProxyEventManager.prototype.double_tap = function(myo, eventData) {
    myo.trigger('double_tap', eventData);
    return myo.zeroOrientation();
  };

  return ExperimentalProxyEventManager;

})(ExtendedProxyEventManager);

_.extend(exports, {
  Events: Events,
  Subscription: Subscription,
  ProxyEventManager: ProxyEventManager,
  ExtendedProxyEventManager: ExtendedProxyEventManager,
  ExperimentalProxyEventManager: ExperimentalProxyEventManager
});

//# sourceMappingURL=data:application/json;base64,