"use strict";
var Hub, Myo, connection, events, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

_ = require('underscore');

events = require('./events');

connection = require('./connection');

Myo = (function(_super) {
  __extends(Myo, _super);

  Myo.defaultConfiguration = {};

  Myo.id = 0;

  function Myo(hub, configuration) {
    this.hub = hub;
    Myo.__super__.constructor.apply(this, arguments);
    this.configuration = _.extend({}, Myo.defaultConfiguration, configuration);
    this.id = Myo.id++;
    this.session = null;
  }

  Myo.prototype.vibrate = function(intensity) {
    if (intensity == null) {
      intensity = 'medium';
    }
    return this.trigger('command', 'vibrate', {
      type: intensity
    });
  };

  Myo.prototype.requestBluetoothStrength = function() {
    return this.trigger('command', 'request_rssi');
  };

  Myo.prototype.zeroOrientation = function() {
    var _ref;
    if ((_ref = this.session) != null ? _ref.extra.lastOrientationData : void 0) {
      this.session.extra.zeroOrientationOffset = this.session.extra.lastOrientationData;
    }
    return this.trigger('zero_orientation');
  };

  Myo.prototype.destroy = function() {
    return this.trigger('destroy');
  };

  return Myo;

})(events.Events);

Hub = (function() {
  function Hub(_arg) {
    this.connection = _arg.connection, this.proxyEventManager = _arg.proxyEventManager;
    this.onMessage = __bind(this.onMessage, this);
    this.myos = {};
    this.subscriptions = [];
    if (!this.connection) {
      this.connection = new connection.Connection();
    }
    if (!this.proxyEventManager) {
      this.proxyEventManager = new events.ProxyEventManager();
    }
    this.subscriptions.push(this.connection.on('message', this.onMessage));
  }

  Hub.prototype.onMessage = function(eventData) {
    var myo;
    myo = this.myos[eventData.myo];
    if (!myo) {
      throw new Error('Specified Myo not found');
    }
    return this.proxyEventManager.handle(myo, eventData);
  };

  Hub.prototype.create = function(configuration) {
    var newMyo;
    newMyo = new Myo(this, configuration);
    this.myos[newMyo.id] = newMyo;
    this.subscriptions.push(newMyo.on('command', (function(_this) {
      return function(command, kwargs) {
        var data;
        data = {
          command: command,
          myo: newMyo.id
        };
        _.extend(data, kwargs);
        return _this.connection.send(JSON.stringify(['command', data]));
      };
    })(this)));
    this.subscriptions.push(newMyo.on('destroy', (function(_this) {
      return function() {
        return _this.myos[newMyo.id] = null;
      };
    })(this)));
    return newMyo;
  };

  Hub.prototype.destroy = function() {
    var subscription, _i, _len, _ref;
    _ref = this.subscriptions;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      subscription = _ref[_i];
      subscription.dispose();
    }
    return this.connection.close();
  };

  return Hub;

})();

_.extend(exports, {
  Hub: Hub,
  Myo: Myo
});

//# sourceMappingURL=data:application/json;base64,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LENBQW9CLE1BQU0sQ0FBQyxFQUFQLENBQVUsU0FBVixFQUFxQixDQUFBLFNBQUEsS0FBQSxHQUFBO2FBQUEsU0FBQSxHQUFBO2VBQ3ZDLEtBQUMsQ0FBQSxJQUFLLENBQUEsTUFBTSxDQUFDLEVBQVAsQ0FBTixHQUFtQixLQURvQjtNQUFBLEVBQUE7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXJCLENBQXBCLENBWkEsQ0FBQTtBQWVBLFdBQU8sTUFBUCxDQWhCTTtFQUFBLENBdEJSLENBQUE7O0FBQUEsZ0JBd0NBLE9BQUEsR0FBUyxTQUFBLEdBQUE7QUFDUCxRQUFBLDRCQUFBO0FBQUE7QUFBQSxTQUFBLDJDQUFBOzhCQUFBO0FBQUEsTUFBQSxZQUFZLENBQUMsT0FBYixDQUFBLENBQUEsQ0FBQTtBQUFBLEtBQUE7V0FDQSxJQUFDLENBQUEsVUFBVSxDQUFDLEtBQVosQ0FBQSxFQUZPO0VBQUEsQ0F4Q1QsQ0FBQTs7YUFBQTs7SUEzQ0YsQ0FBQTs7QUFBQSxDQXdGQyxDQUFDLE1BQUYsQ0FBUyxPQUFULEVBQWtCO0FBQUEsRUFDaEIsR0FBQSxFQUFLLEdBRFc7QUFBQSxFQUVoQixHQUFBLEVBQUssR0FGVztDQUFsQixDQXhGQSxDQUFBIiwiZmlsZSI6Im9sb3Jpbi5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiXG5cbl8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJylcbmV2ZW50cyA9IHJlcXVpcmUoJy4vZXZlbnRzJylcbmNvbm5lY3Rpb24gPSByZXF1aXJlKCcuL2Nvbm5lY3Rpb24nKVxuXG5cbmNsYXNzIE15byBleHRlbmRzIGV2ZW50cy5FdmVudHNcbiAgQGRlZmF1bHRDb25maWd1cmF0aW9uID0ge31cbiAgQGlkID0gMFxuXG4gICMgTXlvIGNvbnN0cnVjdG9yXG4gICMgQHBhcmFtIHtIdWJ9IGh1YlxuICAjIEBwYXJhbSB7b2JqZWN0fSBjb25maWd1cmF0aW9uXG4gIGNvbnN0cnVjdG9yOiAoQGh1YiwgY29uZmlndXJhdGlvbikgLT5cbiAgICBzdXBlclxuICAgIEBjb25maWd1cmF0aW9uID0gXy5leHRlbmQoe30sIE15by5kZWZhdWx0Q29uZmlndXJhdGlvbiwgY29uZmlndXJhdGlvbilcbiAgICBAaWQgPSBNeW8uaWQrKyAgIyBub3Qgc3VyZSBhYm91dCB0aGlzIG9uZVxuICAgIEBzZXNzaW9uID0gbnVsbFxuXG4gIHZpYnJhdGU6IChpbnRlbnNpdHk9J21lZGl1bScpIC0+XG4gICAgQHRyaWdnZXIoJ2NvbW1hbmQnLCAndmlicmF0ZScsIHtcbiAgICAgIHR5cGU6IGludGVuc2l0eVxuICAgIH0pXG5cbiAgcmVxdWVzdEJsdWV0b290aFN0cmVuZ3RoOiAtPlxuICAgIEB0cmlnZ2VyKCdjb21tYW5kJywgJ3JlcXVlc3RfcnNzaScpXG5cbiAgemVyb09yaWVudGF0aW9uOiAtPlxuICAgICMgc2V0IGN1cnJlbnQgb3JpZW50YXRpb24gYXMgdGhlIHN0YXJ0aW5nIHBvaW50IGZvciBhbGwgZnV0dXJlIG9yaWVudGF0aW9uIGNhbGN1bGF0aW9uc1xuICAgIGlmIEBzZXNzaW9uPy5leHRyYS5sYXN0T3JpZW50YXRpb25EYXRhXG4gICAgICBAc2Vzc2lvbi5leHRyYS56ZXJvT3JpZW50YXRpb25PZmZzZXQgPSBAc2Vzc2lvbi5leHRyYS5sYXN0T3JpZW50YXRpb25EYXRhXG4gICAgQHRyaWdnZXIoJ3plcm9fb3JpZW50YXRpb24nKVxuXG4gIGRlc3Ryb3k6IC0+XG4gICAgQHRyaWdnZXIoJ2Rlc3Ryb3knKVxuXG5cbmNsYXNzIEh1YlxuICAjIEh1YiBjb25zdHJ1Y3RvclxuICAjIEFuIGh1YiBpcyByZXNwb25zaWJsZSB0byBrZWVwIHRyYWNrIG9mIGFsbCB0aGUgbXlvcyBjcmVhdGVkIGFuZCB0byBkZWxpdmVyXG4gICMgbWVzc2FnZXMgdG8gdGhlIGNvcnJlY3QgbXlvXG4gICMgQHBhcmFtIHtDb25uZWN0aW9ufSBjb25uZWN0aW9uXG4gIGNvbnN0cnVjdG9yOiAoe0Bjb25uZWN0aW9uLCBAcHJveHlFdmVudE1hbmFnZXJ9KSAtPlxuICAgIEBteW9zID0ge31cbiAgICBAc3Vic2NyaXB0aW9ucyA9IFtdXG5cbiAgICBpZiBub3QgQGNvbm5lY3Rpb25cbiAgICAgICMgYWRkIGEgZGVmYXVsdCBjb25uZWN0aW9uIHRvIHRoaXMgaHViXG4gICAgICBAY29ubmVjdGlvbiA9IG5ldyBjb25uZWN0aW9uLkNvbm5lY3Rpb24oKVxuXG4gICAgaWYgbm90IEBwcm94eUV2ZW50TWFuYWdlclxuICAgICAgIyBhZGQgYSBkZWZhdWx0IHByeHkgZXZlbnQgbWFuYWdlIHRvIHRoaXMgaHViXG4gICAgICBAcHJveHlFdmVudE1hbmFnZXIgPSBuZXcgZXZlbnRzLlByb3h5RXZlbnRNYW5hZ2VyKClcblxuICAgIEBzdWJzY3JpcHRpb25zLnB1c2goQGNvbm5lY3Rpb24ub24oJ21lc3NhZ2UnLCBAb25NZXNzYWdlKSlcblxuICBvbk1lc3NhZ2U6IChldmVudERhdGEpID0+XG4gICAgbXlvID0gQG15b3NbZXZlbnREYXRhLm15b11cblxuICAgIGlmIG5vdCBteW9cbiAgICAgIHRocm93IG5ldyBFcnJvcignU3BlY2lmaWVkIE15byBub3QgZm91bmQnKVxuXG4gICAgQHByb3h5RXZlbnRNYW5hZ2VyLmhhbmRsZShteW8sIGV2ZW50RGF0YSlcblxuICBjcmVhdGU6IChjb25maWd1cmF0aW9uKSAtPlxuICAgIG5ld015byA9IG5ldyBNeW8oQCwgY29uZmlndXJhdGlvbilcbiAgICBAbXlvc1tuZXdNeW8uaWRdID0gbmV3TXlvXG5cbiAgICBAc3Vic2NyaXB0aW9ucy5wdXNoKG5ld015by5vbignY29tbWFuZCcsIChjb21tYW5kLCBrd2FyZ3MpID0+XG4gICAgICBkYXRhID0ge1xuICAgICAgICBjb21tYW5kOiBjb21tYW5kLFxuICAgICAgICBteW86IG5ld015by5pZFxuICAgICAgfVxuICAgICAgXy5leHRlbmQoZGF0YSwga3dhcmdzKVxuICAgICAgQGNvbm5lY3Rpb24uc2VuZChKU09OLnN0cmluZ2lmeShbJ2NvbW1hbmQnLCBkYXRhXSkpXG4gICAgKSlcblxuICAgIEBzdWJzY3JpcHRpb25zLnB1c2gobmV3TXlvLm9uKCdkZXN0cm95JywgPT5cbiAgICAgIEBteW9zW25ld015by5pZF0gPSBudWxsXG4gICAgKSlcbiAgICByZXR1cm4gbmV3TXlvXG5cbiAgZGVzdHJveTogLT5cbiAgICBzdWJzY3JpcHRpb24uZGlzcG9zZSgpIGZvciBzdWJzY3JpcHRpb24gaW4gQHN1YnNjcmlwdGlvbnNcbiAgICBAY29ubmVjdGlvbi5jbG9zZSgpICMgbm90IHN1cmUgYWJvdXQgdGhhdFxuXG5cbl8uZXh0ZW5kKGV4cG9ydHMsIHtcbiAgSHViOiBIdWJcbiAgTXlvOiBNeW9cbn0pXG4iXX0=